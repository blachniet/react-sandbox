{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useForm","control","handleSubmit","reset","useFormState","isDirty","isSubmitted","errors","useState","remaining","setRemaining","doneAt","setDoneAt","Container","fixed","Typography","component","variant","onSubmit","formData","target","Duration","fromObject","hours","parseFloat","targetHours","minutes","targetMinutes","worked","workedHours","workedMinutes","breakDuration","breakHours","breakMinutes","r","minus","DateTime","now","plus","undefined","keepValues","keepIsSubmitted","InputLabel","name","defaultValue","rules","required","render","field","TextField","type","error","helperText","message","sx","width","InputProps","endAdornment","InputAdornment","position","autoFocus","Box","py","Button","toFormat","toLocaleString","TIME_SIMPLE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ebb8195.chunk.js","sourcesContent":["import './App.css';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { useForm, Controller, useFormState } from \"react-hook-form\";\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport { DateTime, Duration } from 'luxon';\nimport { useState } from 'react';\nimport Schedule from '@mui/icons-material/Schedule';\n\nfunction App() {\n  const {control, handleSubmit, reset} = useForm<IFormData>();\n  const {isDirty, isSubmitted, errors} = useFormState({control});\n  const [remaining, setRemaining] = useState<Duration>();\n  const [doneAt, setDoneAt] = useState<DateTime>();\n\n  const handleValidSubmit = (formData: IFormData) => {\n    const target = Duration.fromObject({\n      hours: parseFloat(formData.targetHours),\n      minutes: parseFloat(formData.targetMinutes),\n    });\n    const worked = Duration.fromObject({\n      hours: parseFloat(formData.workedHours),\n      minutes: parseFloat(formData.workedMinutes),\n    });\n    const breakDuration = Duration.fromObject({\n      hours: parseFloat(formData.breakHours),\n      minutes: parseFloat(formData.breakMinutes),\n    });\n\n    const r = target.minus(worked);\n    setRemaining(r);\n    setDoneAt(DateTime.now().plus(r).plus(breakDuration));\n\n    reset(undefined, {\n      keepValues: true,\n      keepIsSubmitted: true,\n    });\n  };\n\n  return (\n    <Container fixed>\n      <Typography component=\"h1\" variant=\"h4\"><Schedule />&nbsp;Watchin' the Clock</Typography>\n      <form onSubmit={handleSubmit(handleValidSubmit)}>\n        <InputLabel>Target</InputLabel>\n        <Controller\n          name=\"targetHours\"\n          defaultValue=\"8\"\n          rules={{\n            required: 'Required',\n          }}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"number\"\n              error={!!errors.targetHours}\n              helperText={errors.targetHours?.message}\n              sx={{width: '10ch'}}\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">h</InputAdornment>,\n              }}\n            />\n          )}\n          control={control}\n        />\n        <Controller\n          name=\"targetMinutes\"\n          defaultValue=\"0\"\n          rules={{\n            required: 'Required',\n          }}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"number\"\n              error={!!errors.targetMinutes}\n              helperText={errors.targetMinutes?.message}\n              sx={{width: '10ch'}}\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\n              }}\n            />\n          )}\n          control={control}\n        />\n        <InputLabel>Worked</InputLabel>\n        <Controller\n          name=\"workedHours\"\n          defaultValue=\"0\"\n          rules={{\n            required: 'Required',\n          }}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              autoFocus\n              type=\"number\"\n              error={!!errors.workedHours}\n              helperText={errors.workedHours?.message}\n              sx={{width: '10ch'}}\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">h</InputAdornment>,\n              }}\n            />\n          )}\n          control={control}\n        />\n        <Controller\n          name=\"workedMinutes\"\n          defaultValue=\"0\"\n          rules={{\n            required: 'Required',\n          }}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"number\"\n              error={!!errors.workedMinutes}\n              helperText={errors.workedMinutes?.message}\n              sx={{width: '10ch'}}\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\n              }}\n            />\n          )}\n          control={control}\n        />       \n        <InputLabel>Breaks left</InputLabel>\n        <Controller\n          name=\"breakHours\"\n          defaultValue=\"0\"\n          rules={{\n            required: 'Required',\n          }}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"number\"\n              error={!!errors.breakHours}\n              helperText={errors.breakHours?.message}\n              sx={{width: '10ch'}}\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">h</InputAdornment>,\n              }}\n            />\n          )}\n          control={control}\n        />\n        <Controller\n          name=\"breakMinutes\"\n          defaultValue=\"0\"\n          rules={{\n            required: 'Required',\n          }}\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"number\"\n              error={!!errors.breakMinutes}\n              helperText={errors.breakMinutes?.message}\n              sx={{width: '10ch'}}\n              InputProps={{\n                endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\n              }}\n            />\n          )}\n          control={control}\n        />\n        <Box py={1}>\n          <Button variant=\"contained\" type=\"submit\">Calculate</Button>\n        </Box>\n      </form>\n      {!isDirty && isSubmitted ? (\n        <Typography>\n          You have <strong>{remaining?.toFormat(\"h'h'm'm'\")}</strong> left to work. You will be done at <strong>{doneAt?.toLocaleString(DateTime.TIME_SIMPLE)}</strong>.\n        </Typography>\n      ) : ''}\n    </Container>\n  );\n}\n\nexport default App;\n\ninterface IFormData {\n  targetHours: string;\n  targetMinutes: string;\n  workedHours: string;\n  workedMinutes: string;\n  breakHours: string;\n  breakMinutes: string;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}